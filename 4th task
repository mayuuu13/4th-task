To accomplish these tasks, we'll work through the following steps:

1. Import the data: Load the dataset, set the index to the date column, and clean it by filtering out the top 2.5% and bottom 2.5% of page views.


2. Create the draw_line_plot function: This will plot a line chart showing daily freeCodeCamp Forum page views.


3. Create the draw_bar_plot function: This will plot a bar chart showing average page views for each month, grouped by year.


4. Create the draw_box_plot function: This will create box plots to visualize the data distribution by year and by month.



Step-by-step Implementation

Step 1: Import and Clean Data

First, load the data and filter out outliers.

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Import data
df = pd.read_csv('fcc-forum-pageviews.csv', parse_dates=['date'], index_col='date')

# Clean data by removing the top and bottom 2.5% of page views
lower_bound = df['value'].quantile(0.025)
upper_bound = df['value'].quantile(0.975)
df_clean = df[(df['value'] >= lower_bound) & (df['value'] <= upper_bound)]

Step 2: Create the draw_line_plot Function

Now, we’ll create a function that draws a line plot of daily page views, with proper titles and labels.

def draw_line_plot():
    # Create figure and plot the data
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(df_clean.index, df_clean['value'], color='r', linewidth=1)

    # Add title and labels
    ax.set_title('Daily freeCodeCamp Forum Page Views 5/2016-12/2019')
    ax.set_xlabel('Date')
    ax.set_ylabel('Page Views')

    # Save image and return figure
    fig.savefig('line_plot.png')
    return fig

Step 3: Create the draw_bar_plot Function

We’ll group the data by month and year and create a bar plot to show the average daily page views for each month.

def draw_bar_plot():
    # Prepare data for bar plot
    df_bar = df_clean.copy()
    df_bar['year'] = df_bar.index.year
    df_bar['month'] = df_bar.index.strftime('%B')

    # Pivot the data for plotting
    df_bar_grouped = df_bar.groupby(['year', 'month'])['value'].mean().unstack()

    # Create the bar plot
    fig = df_bar_grouped.plot(kind='bar', figsize=(12, 6)).figure
    plt.xlabel('Years')
    plt.ylabel('Average Page Views')
    plt.legend(title='Months')

    # Save image and return figure
    fig.savefig('bar_plot.png')
    return fig

Step 4: Create the draw_box_plot Function

For the box plot, we need two types of plots: one showing the yearly distribution of page views and one showing the monthly distribution.

def draw_box_plot():
    # Prepare data for box plots
    df_box = df_clean.copy()
    df_box['year'] = df_box.index.year
    df_box['month'] = df_box.index.strftime('%b')
    df_box['month_num'] = df_box.index.month
    df_box = df_box.sort_values('month_num')

    # Create two subplots
    fig, axes = plt.subplots(1, 2, figsize=(15, 6))

    # Year-wise Box Plot (Trend)
    sns.boxplot(x='year', y='value', data=df_box, ax=axes[0])
    axes[0].set_title('Year-wise Box Plot (Trend)')
    axes[0].set_xlabel('Year')
    axes[0].set_ylabel('Page Views')

    # Month-wise Box Plot (Seasonality)
    sns.boxplot(x='month', y='value', data=df_box, ax=axes[1])
    axes[1].set_title('Month-wise Box Plot (Seasonality)')
    axes[1].set_xlabel('Month')
    axes[1].set_ylabel('Page Views')

    # Save image and return figure
    fig.savefig('box_plot.png')
    return fig

Full Code

Here’s the entire code encapsulated into the necessary functions. Each function processes and visualizes the data accordingly.

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Import data
df = pd.read_csv('fcc-forum-pageviews.csv', parse_dates=['date'], index_col='date')

# Clean data by removing the top and bottom 2.5% of page views
lower_bound = df['value'].quantile(0.025)
upper_bound = df['value'].quantile(0.975)
df_clean = df[(df['value'] >= lower_bound) & (df['value'] <= upper_bound)]

def draw_line_plot():
    # Create figure and plot the data
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(df_clean.index, df_clean['value'], color='r', linewidth=1)

    # Add title and labels
    ax.set_title('Daily freeCodeCamp Forum Page Views 5/2016-12/2019')
    ax.set_xlabel('Date')
    ax.set_ylabel('Page Views')

    # Save image and return figure
    fig.savefig('line_plot.png')
    return fig

def draw_bar_plot():
    # Prepare data for bar plot
    df_bar = df_clean.copy()
    df_bar['year'] = df_bar.index.year
    df_bar['month'] = df_bar.index.strftime('%B')

    # Pivot the data for plotting
    df_bar_grouped = df_bar.groupby(['year', 'month'])['value'].mean().unstack()

    # Create the bar plot
    fig = df_bar_grouped.plot(kind='bar', figsize=(12, 6)).figure
    plt.xlabel('Years')
    plt.ylabel('Average Page Views')
    plt.legend(title='Months')

    # Save image and return figure
    fig.savefig('bar_plot.png')
    return fig

def draw_box_plot():
    # Prepare data for box plots
    df_box = df_clean.copy()
    df_box['year'] = df_box.index.year
    df_box['month'] = df_box.index.strftime('%b')
    df_box['month_num'] = df_box.index.month
    df_box = df_box.sort_values('month_num')

    # Create two subplots
    fig, axes = plt.subplots(1, 2, figsize=(15, 6))

    # Year-wise Box Plot (Trend)
    sns.boxplot(x='year', y='value', data=df_box, ax=axes[0])
    axes[0].set_title('Year-wise Box Plot (Trend)')
    axes[0].set_xlabel('Year')
    axes[0].set_ylabel('Page Views')

    # Month-wise Box Plot (Seasonality)
    sns.boxplot(x='month', y='value', data=df_box, ax=axes[1])
    axes[1].set_title('Month-wise Box Plot (Seasonality)')
    axes[1].set_xlabel('Month')
    axes[1].set_ylabel('Page Views')

    # Save image and return figure
    fig.savefig('box_plot.png')
    return fig

This code accomplishes the tasks you've requested. The functions can be used to visualize the dataset as line plots, bar plots, and box plots. Let me know if you need further assistance or adjustments!

